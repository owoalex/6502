BBC MEMORY MAP (pt. 1)
----------------------

  This memory map is for a BBC microcomputer model'B' fitted with
Operating System 1.20 and BASIC II. It also gives details of memory
usage by the Acorn DFS. If another language rom is in use other than
BASIC then the map will be different.

Compiled By Alan Coats Jan'1985

This memory map has been submitted to 8-Bit Software and is believed to
be Public Domain, I have made many alterations to the original file but
have not been able to check all the information, if you find any errors
or omissions please let me know.

Mick Needham (6EE)

PAGE ZERO (&00) : OS, BASIC & USER workspace

A large part of the contents of page zero may be altered if a language
rom other than BASIC is used.

0000-0001 LOMEM (LO-HI) pointer to start of BASIC variables
0002-0003 VARTOP (LO-HI) pointer to end of BASIC variables
0004-0005 Basic stack-pointer (LO-HI)
0006-0007 HIMEM (LO-HI)
0008-0009 ERL (LO-HI)
000A BASIC text pointer offset
000B-000C Text-pointer (LO-HI)
000D-0011 RND store (5 bytes)
0012-0013 TOP (LO-HI)
0014 Number of characters in PRINT field
0015 PRINT flag: bit 7 set if PRINT output in hex
0016-0017 ERROR vector default to &B443 (LO-HI)
0018 PAGE (high byte - low byte always &00)
0019-001A Secondary BASIC text-pointer
001B Offset for secondary BASIC text-pointer
001C-001D DATA pointer - reset to PAGE
001E COUNT
001F LISTO option
0020 TRACE flag: &00=ON &01=OFF
0021-0022 Maximum TRACE number
0023 WIDTH
0024 Number of REPEATs left
0025 Number of GOSUBs left
0026 15*number of FORs left
0027 Variable type:
 &00=string
 &40=integer
 &05=floating-point
 &A4=function
 &F2=procedure
 &FF=real
0028 OPT value for assembler
 Bit 0 list flag
 Bit 1 error flag
 Bit 2 relocate flag
0029-002B Assembled code buffer (3 bytes)
002A-002D Integer accumulator (IAC) (4 bytes)
 2A-2B Pointer to variable
 2C    Variable type
 &00=8 bit byte
 &04=32 bit integer variable
 &05=40 bit floating point variable
 &80=string at a defined address
 &81=dynamic string
002E-0035 Floating-point accumulator 1 (FAC#1)
 2E Sign/POINT parameter
 2F overflow/underflow byte
 30 exponent
 31-34 mantissa
 35 rounding byte
0036 Length of string
0037-0038 Object location in assembler
 RENUMBER pointer
 Pointer for variable name in DIM
 Line-crunching pointer
 Action address JMP vector
0039 Length of variable name
0039-003A Number of bytes into array to find variable
 Pointer to keyword table
 RENUMBER/DELETE line-number
003B-003C Pointer for RENUMBER
 Number of inserted spaces in LISTO
003B-0042 Floating-point accumulator 2 (FAC#2)
 3B sign
 3C underflow/overflow byte
 3D exponent
 3E-41 mantissa
 42 rounding byte
003C-003D Pointer used in DEF
003D-003E Pointer used in search for line and in line-crunching
003F Array type:
 &05=floating-point
 &04=string
003F-0047 Hex output nibbles
0042-0047 Numeric work area
0043 Temporary store for calculating exponents
0048 Counter in series evaluation
0049 Adjustment factor for ASCII/floating-point conversion
004A Temporary store for calculating exponents
004B-004C Pointer to current variable
004D File-number temporary store
004D-004E LISTO pointer
004F INPUT flags
0050-006F Not used
0070-008F Guaranteed unused (32 bytes) with BASIC
0090-009F Econet workspace
00A0-00A7 Allocated to current NMI owner
00A8-00AF OS command workspace
00B0-00BF Filing system scratch space
00C0-00CF Filing system private space
00D0 VDU status
 Bit 0 VDU 2 enabled
 Bit 1 Scrolling disabled
 Bit 2 Paged scrolling selected
 Bit 3 Soft scrolling
 Bit 4 Not used
 Bit 5 VDU 5 enabled
 Bit 6 Set when edit and text cursor are separated
 Bit 7 Set if VDU driver disabled
00D1 Byte mask for current graphics point
00D2-00D3 Text colour bytes to be ORed and EORed into memory, respectively
00D4-00D5 As D2-D3 except for graphics colour bytes
00D6-00D7 Address of top line of current graphics character cell
00D8 Caps-lock/shift-lock
 No locks:   48
 Caps lock:  32
 Shift lock: 16
00DA-00DF Temporary workspace
00E0-00E1 Pointer to row multiplication table, high byte first
00E2 Cassette filing system status byte
 Bit 0 Set if input file open
 Bit 1 Set if output file open
 Bit 2 Not used
 Bit 3 Set if currently *CAT
 Bit 4 Not used
 Bit 5 Not used
 Bit 6 Set if at end of file
 Bit 7 Set if end of file warning given
00E3 Cassette filing system options byte (*OPT)
00E4-00E6 General OS workspace
00E7 Auto repeat countdown timer
00E8-00E9 Pointer to input buffer used by OSWORD &01
00EA RS423 timeout counter
 =1  Cassette filing system using 6850
 =0  RS423 system holds 6850 but has timed out
 <0  RS423 system holds 6850 but has not yet timed out
00EB Cassette critical flag
00EC Internal key number of most recently pressed key
00ED Internal key number of first key pressed of those still pressed
00EE Internal key number of character to be ignored when scanning keyboard
 NOTE : EE also RAM copy of 1MHz bus register
00EF Accumulator value for most recent OSBYTE/OSWORD
00F0 X reg for most recent OSBYTE/OSWORD
00F1 Y reg for most recent OSBYTE/OSWORD
00F2-00F3 Text pointer for processing OS commands or filenames
00F4 RAM copy of currently selected ROM number
00F5 Current logical speech PHROM or ROM filing system ROM number
00F6-00F7 Address pointer into paged ROM or speech PHROM
00F8-00F9 Not used
00FA-00FB General OS workspace
00FC Accumulator saved here in IRQ routine
00FD-00FE Pointer to error message
00FF Flag: bit 7 set if ESCAPE pressed

PAGE 1 (&01) : 6502 STACK

0100-01FFProcessor stack (256 bytes)

PAGE 2 (&02) : OS workspace

0200-0201 User vector(USERV)
0202-0203 BRK vector(BRKV)
0204-0205 Interrupt-request vector 1(IRQ1V)
0206-0207 Interrupt-request vector 2(IRQ2V)
 (User interrupt routines vectored here)
0208-0209 OSCLI vector(CLIV)
020A-020B OSBYTE vector(BYTEV)
020C-020D OSWORD vector(WORDV)
020E-020F OSWRCH vector(WRCHV)
0210-0211 OSRDCH vector(RDCHV)
0212-0213 OSFILE vector(FILEV)
0214-0215 OSARGS vector(ARGSV)
0216-0217 OSBGET vector(BGETV)
0218-0219 OSBPUT vector(BPUTV)
021A-021B OSGBPB vector(GBPBV)
021C-021D OSFIND vector(FINDV)
021E-021F File system control entry vector(FSCV)
0220-0221 Event interrupt vector(EVNTV)
0222-0223 User's print routine vector(UPTV)
0224-0225 Used by ECONET to take control of computer(NETV)
0226-0227 Unrecognised VDU23 and PLOT commands(VDUV)
0228-0229 For all keyboard access(KEYV)
022A-022B Insert into buffer vector(INSV)
022C-022D Remove from buffer vector(REMV)
022E-022F Count/purge buffer vector(CNPV)
0230-0231 Spare vector(IND1V)
0232-0233 Spare vector(IND2V)
0234-0235 Spare vector(IND3V)
0236-0237 Start address of OS variables
0238-0239 Address of ROM pointer table
023A-023B Address of ROM information table
023C-023D Address of key translation table
023E-023F Start address of OS VDU variables
0240 CFS timeout counter
0241 Input source
0242 Keyboard semaphore
0243 Primary OSHWM
0244 Current OSHWM
0245 RS423 mode
0246 Character definition explosion state
0247 Cassette/ROM filing system switch
0248 RAM copy of video ULA control reg
0249 RAM copy of video ULA palette reg
024A ROM number active at last BRK
024B Number of ROM socket containing BASIC
024C Current ADC channel
024D Maximum ADC channel number
024E ADC conversion type
024F RS423 use flag
0250 RS423 control flag
0251 Flashing colours counter
0252 Mark period counter
0253 Space period counter
0254 Keyboard auto-repeat delay
0255 Keyboard auto-repeat period
0256 *EXEC file handle
0257 *SPOOL file handle
0258 ESCAPE/BREAK effect
0259 Econet keyboard disable
025A Keyboard status byte
025B RS423 handshake extent
025C RS423 input supression flag
025D RS423/cassette selection flag
025E Econet OS call interception status
025F Econet OSRDCH interception status
0260 Econet OSWRCH interception status
0261 Speech supression status
0262 Sound supression status
0263 BELL channel
0264 BELL envelope number/volume
0265 BELL frequency
0266 BELL duration
0267 Startup message and !BOOT options
0268 Length of soft key string
0269 Number of lines printed since last page
026A Number of items in VDU queue
026B TAB character value
026C ESCAPE character value
026D Character &C0 to &CF status
026E Character &D0 to &DF status
026F Character &E0 to &EF status
0270 Character &F0 to &FF status
0271 Function key status
0272 SHIFT+function key status
0273 CTRL+function key status
0274 CTRL+SHIFT+function key status
0275 ESCAPE key status
0276 ESCAPE effect flag
0277 IRQ bit mask for user 6522
0278 IRQ bit mask for 6850
0279 IRQ bit mask for system 6522
027A Tube presence flag
027B Speech processor presence flag
027C Write character destination status
027D Cursor editing status
027E Not used
027F Not used
0280 Not used
0281 Used by *FX1
0282 RAM copy of serial processor ULA
0283 Timer switch state
0284 Soft key consistancy flag
0285 Printer destination flag
0286 Character ignored by printer
0287-0289 BREAK intercept code
028A Not used
028B Not used
028C Current language ROM number
028D Last BREAK type
028E Available RAM
028F Start up option flag
0290 VDU vertical adjust, as set by *TV
0291 Interlace toggle flag, as set by *TV
0292-0296 First copy of system clock values
0297-029B Second copy of system clock values
029C-02A0 Countdown interval timer value
02A1-02B0 Paged ROM type table
02B1-02B2 INKEY countdown timer
02B3-02B5 OSWORD &01 workspace
02B6-02B9 Low bytes of most recent analogue converter values
02BA-02BD High bytes of most recent analogue converter values
02BE Analogue system flag
02BF-02C8 Event enable flags
02C9 Soft key expansion pointer
02CA First auto repeat count
02CB-02CD Two key rollover processing workspace
02CE Sound semaphore
02CF-02D7 Buffer busy flags
02D8-02E0 Buffer start indices
02E1-02E9 Buffer end indices
02EA-02EB Block size of currently resident block of open cassette input file
02EC Block flag of currently resident block of open cassette input file
02ED Last character in currently resident block of open cassette input file
02EE-02FF Used as area to build OSFILE control blocks for *LOAD and *SAVE

PAGE 3 (&03) : OS workspace

0300-0301 X co-ordinate: right side of graphics window
0302-0303 Y co-ordinate: bottom of graphics window
0304-0305 X co-ordinate: left side of graphics window
0306-0307 Y co-ordinate: top of graphics window
0308 X co-ordinate: left side of text window
0309 Y co-ordinate: bottom of text window
030A X co-ordinate: right side of text window
030B Y co-ordinate: top of text window
030C-030D X co-ordinate: graphics origin
030E-030F Y co-ordinate: graphics origin
0310-0313 Current graphic origin in external co-ordinates
0314-0317 Current graphics cursor in external co-ordinates
0318 Text cursor X co-ordinate
0319 Text cursor Y co-ordinate
031A Line within current graphics character of current graphics point
031B-031E Graphics workspace OR first part of VDU queue
031F-0323 VDU queue
0324-0327 Current graphics cursor in internal co-ordinates
033C-033D Graphics cursor Y co-ordinate
033E-033F Graphics cursor X co-ordinate
034A-034B Text cursor address
034C-034D Text window width in bytes
034E High byte of screen memory start address (low byte assumed to be &00)
034F Number of bytes per character
0350-0351 Address of top-left of screen (true address when hardware-scroll
          in operation)
0352-0353 Number of bytes per line
0354 Screen memory length
0355 Mode
0356 Screen memory map type
0357 Foreground text colour
0358 Background text colour
0359 Graphics foreground mask
035A Graphics background mask
035B Graphics foreground modifier
035C Graphics background modifier
035D-035E General VDU jump vector
035F Record of last setting of 6845 cursor start reg
0360 Number of colours available
0361 Number of pixels per byte
0362-0363 Left and right colour masks
0364-0365 X and Y co-ordinates of text input cursor
0366 Teletext output cursor character
0367 Font flag (RAM or ROM)
 Bit 1 Characters 224-255
 Bit 2 Characters 192-223
 Bit 3 Characters 160-191
 Bit 4 Characters 128-159
 Bit 5 Characters 96-127
 Bit 6 Characters 64-95
 Bit 7 Characters 32-63
0368-036E Font location bytes
036F-037E Palette 16 bytes containing actual colour for each logical colour
0380-039C Header block for BPUT file store
039D Offset of next byte to be output into BPUT buffer
039E Offset of next byte to be read from BGET buffer
039F-03A6 Not used
03A7-03B1 Filename of file being BGETed
03B2-03D0 Block header of most recent block read
 B2-BD Filename terminated by zero
 BE-C1 Load address
 C2-C5 Execution address
 C6-C7 Block number
 C8-C9 Length of block
 CA    Block flag byte
 CB-CE Four spare bytes
 CF-D0 Checksum byte
03D1 Sequential block gap as set by *OPT3
03D2-03DC Filename of file being searched for
03DD-03DE Number of next block expected for BGET
03DF Copy of block flag of last block read
03E0-03FF Run-time keyboard buffer (32 bytes)

PAGE 4 (&04)   : BASIC workspace

0400-046B System integer variables @% to Z% :4 bytes each (LO-HI)
046C-047F Floating point temporary area
0480-04F5 Variables catalogue
 80-81 Pointer to first variable @...
 82-83 Pointer to first variable A...
 ...and so on to Z..., then a... and so on to...
F4-F5 Pointer to first variable z...
 (Each pointer starts a linked list of all variables beginning with its letter)
04F6-04F7 Pointer to procedures list
04F8-04F9 Pointer to functions list
04FA-04FF Not used

PAGE 5 (&05)   : BASIC workspace

0500-0595 FOR stack
0596-05A3 Not used
05A4-05CB REPEAT stack
05CC-05FF GOSUB stack

PAGE 6 (&06)   : BASIC workspace

0600-06FF String buffer

PAGE 7 (&07)   : BASIC workspace

0700-07FF Line input buffer

PAGE 8 (&08)   : SOUND & PRINTER BUFFER

0800-083F Sound workspace
0840-084F Sound channel 0 buffer
0850-085F Sound channel 1 buffer
0860-086F Sound channel 2 buffer
0870-087F Sound channel 3 buffer
0880-08BF Printer buffer
08C0-08FF Envelope storage area, envelopes 1-4

PAGE 9 (&09)    : RS423, SPEECH & TAPE BUFFER

0900-09BF Envelope storage area, envelopes 5-16
09C0-09FF Speech buffer
 OR
0900-09BF RS423 output buffer
09C0-09FF Speech buffer
 OR
0900-09FF Cassette output buffer

PAGE 10 (&0A)   : RS423 & TAPE BUFFER

0A00-0AFF RS423 input buffer
 OR
0A00-0AFF Cassette input buffer

PAGE 11 (&0B)   : FUNCTION KEYS

0B00 Pointer to *KEY0 text
0B01 Pointer to *KEY1 text
0B02 Pointer to *KEY2 text
0B03 Pointer to *KEY3 text
0B04 Pointer to *KEY4 text
0B05 Pointer to *KEY5 text
0B06 Pointer to *KEY6 text
0B07 Pointer to *KEY7 text
0B08 Pointer to *KEY8 text
0B09 Pointer to *KEY9 text
0B0A Pointer to *KEY10 text
0B0B Pointer to *KEY11 text
0B0C Pointer to *KEY12 text
0B0D Pointer to *KEY13 text
0B0E Pointer to *KEY14 text
0B0F Pointer to *KEY15 text
0B10-0BFF Function keys text

PAGE12 (&0C)   : USER-DEFINED CHARACTERS

0C00-0CFF Characters 224-255 definitions

PAGE 13 (&0D)  : OS workspace

0D00-0D9E NMI routines (disk and Econet)
0D9F-0DEF Expander vector set
0DF0-0DFF Paged ROM workspace storage locations

PAGE 14 (&0E)  : DFS or USER workspace

0E00-0EFF Workspace in disk systems : Contains copy of track 0, sector 0 on
         the currently accessed disk (catalogue data)

PAGE 15 (&0F)  : DFS or USER workspace

0F00-0FFF Workspace in disk systems : Contains copy of
track 0, sector 1 on the currently accessed disk (catalogue data)

PAGE 16 (&10)  : DFS or USER workspace

1000-10FF Workspace in disk systems

PAGE 17 (&11)  : DFS or USER workspace

1100-11FF Parameter-blocks for files/SPOOL/EXEC

PAGE 18 (&12)  : DFS or USER workspace

1200-12FF EXEC/SPOOL workspace - First file buffer
Programs which do not use data-files, SPOOL or EXEC may use this space

PAGE 19 (&13)  : DFS or USER workspace

1300-13FF Second file buffer : Programs which do not use
          more than one data-file may use this space

PAGE 20 (&14)  : DFS or USER workspace

1400-14FF Third file buffer : Programs which do not use
          more than two data-files may use this space

PAGE 21 (&15)  : DFS or USER workspace

1500-15FF Fourth file buffer : Programs which do not use
          more than three data-files may use this space

PAGE 22 (&16)  : DFS or USER workspace

1600-16FF Fifth file buffer : Programs which do not use
          more than four data files may use this space

PAGE 23 (&17)  : DFS or USER workspace
PAGE 24 (&18)  : DFS or USER workspace
PAGE 25 (&19)  : USER workspace
PAGE 26 (&1A)  : USER workspace
PAGE 27 (&1B)  : USER workspace
PAGE 28 (&1C)  : USER workspace
PAGE 29 (&1D)  : USER workspace
PAGE 30 (&1E)  : USER workspace
PAGE 31 (&1F)  : USER workspace
PAGE 32 (&20)  : USER workspace
PAGE 33 (&21)  : USER workspace
PAGE 34 (&22)  : USER workspace
PAGE 35 (&23)  : USER workspace
PAGE 36 (&24)  : USER workspace
PAGE 37 (&25)  : USER workspace
PAGE 38 (&26)  : USER workspace
PAGE 39 (&27)  : USER workspace
PAGE 40 (&28)  : USER workspace
PAGE 41 (&29)  : USER workspace
PAGE 42 (&2A)  : USER workspace
PAGE 43 (&2B)  : USER workspace
PAGE 44 (&2C)  : USER workspace
PAGE 45 (&2D)  : USER workspace
PAGE 46 (&2E)  : USER workspace
PAGE 47 (&2F)  : USER workspace
PAGE 48 (&30)  : USER workspace or SCREEN memory (HIMEM 0,1,2)
PAGE 49 (&31)  : USER workspace or SCREEN memory
PAGE 50 (&32)  : USER workspace or SCREEN memory
PAGE 51 (&33)  : USER workspace or SCREEN memory
PAGE 52 (&34)  : USER workspace or SCREEN memory
PAGE 53 (&35)  : USER workspace or SCREEN memory
PAGE 54 (&36)  : USER workspace or SCREEN memory
PAGE 55 (&37)  : USER workspace or SCREEN memory
PAGE 56 (&38)  : USER workspace or SCREEN memory
PAGE 57 (&39)  : USER workspace or SCREEN memory
PAGE 58 (&3A)  : USER workspace or SCREEN memory
PAGE 59 (&3B)  : USER workspace or SCREEN memory
PAGE 60 (&3C)  : USER workspace or SCREEN memory
PAGE 61 (&3D)  : USER workspace or SCREEN memory
PAGE 62 (&3E)  : USER workspace or SCREEN memory
PAGE 63 (&3F)  : USER workspace or SCREEN memory
PAGE 64 (&40)  : USER workspace or SCREEN memory (HIMEM 3)
PAGE 65 (&41)  : USER workspace or SCREEN memory
PAGE 66 (&42)  : USER workspace or SCREEN memory
PAGE 67 (&43)  : USER workspace or SCREEN memory
PAGE 68 (&44)  : USER workspace or SCREEN memory
PAGE 69 (&45)  : USER workspace or SCREEN memory
PAGE 70 (&46)  : USER workspace or SCREEN memory
PAGE 71 (&47)  : USER workspace or SCREEN memory
PAGE 72 (&48)  : USER workspace or SCREEN memory
PAGE 73 (&49)  : USER workspace or SCREEN memory
PAGE 74 (&4A)  : USER workspace or SCREEN memory
PAGE 75 (&4B)  : USER workspace or SCREEN memory
PAGE 76 (&4C)  : USER workspace or SCREEN memory
PAGE 77 (&4D)  : USER workspace or SCREEN memory
PAGE 78 (&4E)  : USER workspace or SCREEN memory
PAGE 79 (&4F)  : USER workspace or SCREEN memory
PAGE 80 (&50)  : USER workspace or SCREEN memory
PAGE 81 (&51)  : USER workspace or SCREEN memory
PAGE 82 (&52)  : USER workspace or SCREEN memory
PAGE 83 (&53)  : USER workspace or SCREEN memory
PAGE 84 (&54)  : USER workspace or SCREEN memory
PAGE 85 (&55)  : USER workspace or SCREEN memory
PAGE 86 (&56)  : USER workspace or SCREEN memory
PAGE 87 (&57)  : USER workspace or SCREEN memory
PAGE 88 (&58)  : USER workspace or SCREEN memory (HIMEM 4,5)
PAGE 89 (&59)  : USER workspace or SCREEN memory
PAGE 90 (&5A)  : USER workspace or SCREEN memory
PAGE 91 (&5B)  : USER workspace or SCREEN memory
PAGE 92 (&5C)  : USER workspace or SCREEN memory
PAGE 93 (&5D)  : USER workspace or SCREEN memory
PAGE 94 (&5E)  : USER workspace or SCREEN memory
PAGE 95 (&5F)  : USER workspace or SCREEN memory
PAGE 96 (&60)  : USER workspace or SCREEN memory (HIMEM 6)
PAGE 97 (&61)  : USER workspace or SCREEN memory
PAGE 98 (&62)  : USER workspace or SCREEN memory
PAGE 99 (&63)  : USER workspace or SCREEN memory
PAGE 100 (&64) : USER workspace or SCREEN memory
PAGE 101 (&65) : USER workspace or SCREEN memory
PAGE 102 (&66) : USER workspace or SCREEN memory
PAGE 103 (&67) : USER workspace or SCREEN memory
PAGE 104 (&68) : USER workspace or SCREEN memory
PAGE 105 (&69) : USER workspace or SCREEN memory
PAGE 106 (&6A) : USER workspace or SCREEN memory

BBC Model B Memory map (pt. 2)

PAGE 107 (&6B) : USER workspace or SCREEN memory
PAGE 108 (&6C) : USER workspace or SCREEN memory
PAGE 109 (&6D) : USER workspace or SCREEN memory
PAGE 110 (&6E) : USER workspace or SCREEN memory
PAGE 111 (&6F) : USER workspace or SCREEN memory
PAGE 112 (&70) : USER workspace or SCREEN memory
PAGE 113 (&71) : USER workspace or SCREEN memory
PAGE 114 (&72) : USER workspace or SCREEN memory
PAGE 115 (&73) : USER workspace or SCREEN memory
PAGE 116 (&74) : USER workspace or SCREEN memory
PAGE 117 (&75) : USER workspace or SCREEN memory
PAGE 118 (&76) : USER workspace or SCREEN memory
PAGE 119 (&77) : USER workspace or SCREEN memory
PAGE 120 (&78) : USER workspace or SCREEN memory
PAGE 121 (&79) : USER workspace or SCREEN memory
PAGE 122 (&7A) : USER workspace or SCREEN memory
PAGE 123 (&7B) : SCREEN memory (HIMEM 7)
PAGE 124 (&7C) : SCREEN memory
PAGE 125 (&7D) : SCREEN memory
PAGE 126 (&7E) : SCREEN memory
PAGE 127 (&7F) : SCREEN memory

PAGES 128 (&80) to 191 (&BF)

Paged rom area ( See Memory maps of particular Paged Roms )

PAGE 192 (&C0) to 194 (&C2) : OS ROM

C000-C2FF Character font lookup table

PAGE 195 (&C3) : OS ROM

C300 Initialise system
C303 "BBC Computer" embedded message
C312 "16k + BELL" embedded message
C317 "32k + BELL" embedded message
C31F-C32E Lookup table of byte masks for 4 colour modes
C32F-C332 Lookup table of byte masks for 16 colour modes
C333-C374 Address table for decoding VDU codes 0 to 31
C375-C3B4 32 entries of a *640 multiplication table
C3B5-C3E6 25 entries of a *40 multiplication table
C3E7-C3EE One byte per display mode, giving number of character
          rows displayed minus one
C3EF-C3F6 One byte per display mode, giving number of character
          columns displayed minus one
C3F7-C3FE One byte per mode, giving value stored in video ULA
          control register for that mode
C3FF See &C400-&C406

PAGE 196 (&C4) : OS ROM

C400-C406 One byte per display mode, giving number of bytes
          storage taken per character (also includes &C3FF)
C407-C408 Mask table for 16 colour modes
C409-C40C Mask table for 4 colour modes
C40D-C414 Mask table for 2 colour modes
C414-C41B One byte per mode, giving number of colours minus one
C41B-C425 Processing table for GCOL actions
C424-C425 Colour table - 2
C426-C429 Colour table - 4
C42A-C439 Colour table - 16
C43A-C441 One byte per display mode, giving number of pixels
          per byte on screen minus one
C440-C447 One byte per display mode, giving memory map type
          for the mode
C447-C448 Various VDU section control numbers
C459-C45D One byte per memory map type giving most
          significant byte of number of bytes taken up by the screen
C45E-C462 One byte per memory map type giving most significant byte
          of address of first location used by the screen
C463-C46D Table used by VDU section to index into other tables
C46E-C479 6854 registers 0-11 for memory map type 0 (mode 0-2)
C47A-C485 6854 registers 0-11 for memory map type 1 (mode 3)
C486-C491 6854 registers 0-11 for memory map type 2 (mode 4-5)
C492-C49D 6854 registers 0-11 for memory map type 3 (mode 6)
C49E-C4A9 6854 registers 0-11 for memory map type 4 (mode 7)
C4AA-C4AD VDU routine vector addresses
C4AE-C4B1 VDU routine branch vector address lo
C4B2-C4B5 VDU routine branch vector address hi
C4B6-C4B9 Teletext conversion table
C4BA-C4BF Soft character RAM allocation
C4C0 Check VDU command, if normal character, PRINT it
C4ED RUBOUT

PAGE 197 (&C5) : OS ROM

C511 VDU 0, VDU 6, VDU 27 entry point
C53B VDU 1 send next character to printer only
C55E Confrim input, output cursor not separated
C565 Prepare cursor character for display
C568 Interchange cursors, set CRTC address reg., toggle VDUscreen status
C588 Get graphics cursor printing status bit
C58D VDU 14 paged mode on
C596 VDU 2 enable printer
C59B VDU 21 disable VDU drivers or delete current line
C59D Set VDU status or, if zero, reset default
C5A1 VDU 3 disable printer
C5A6 VDU 15 paged mode off
C5A8 Reset specified VDU status bits
C5AD VDU 4 write text at text cursor
C5B9 VDU 5 write text at graphics cursor
C5C5 VDU 8 backspace one character

PAGE 198 (&C6) : OS ROM

C621 Move graphisc cursor one position
C65B VDU 11 move cursor up one line
C664 VDU 9 advance text cursor if enabled
C684 Set text cursor to new line, scrolling if required
C6AC Clear text line to background, calculate offset, set CRTC address
C6AF Calculate offset of character row, set text cursor address register
C6B4 Paged mode scrolling
C6F0 VDU 10 move cursor down one line (line feed)
C6FA VDU 28 define text window

PAGE 199 (&C7) : OS ROM

C735 OSWORD 09 read pixel value
C74B OSWORD 0B read palette
C759 VDU 12 clear text area
C779 VDU 30 home text cursor to top left
C787 VDU 31 move text cursor to X,Y
C7A8 Interchange current text cursor with value from general graphics
     co-ordinate workspace
C7AF VDU 13 move cursor to start of current line
C7C0 VDU 16 clear graphics area
C7F9 VDU 17 define text colour
C7FD VDU 18 define graphics colour

PAGE 200 (&C8) : OS ROM

C839 VDU 20 restore default logical colour
C88F Save colour index and define logical colour
C892 VDU 19 define logical colour
C89E Set logical/physical colour relationship
C8E0 PSWORD 0C write palette
C8EB VDU 22 select screen MODE
C8F1 VDU 23 re-program display character or write to CRTC

PAGE 201 (&C9) : OS ROM

C938 Process un-recognised VDU command
C93F Setup CRTC
C951 Set 6845 cursor register to previous value
C954 Set 6845 cursor parameters register (A=register)
C958 Write parameter from VDU queue to specified CRTC reg
C95E Set specified CRTC register
C98C VDU 25 PLOT k,x,y
C994 Backspace one row, set CRTC screen start address reg
C9A4 Advance one row, set CRTC screen start address reg
C9B3 Set 6845 CRTC screen start address reg
C9BD VDU 26 restore default windows
C9F6 Save 6845 text cursor position address, set corresponding 6845 reg

PAGE 202 (&CA) : OS ROM

CA02 Set 6845 text cursor address registers
CA0E Set 6845 CRTC registers indexed by Y reg
CA2B Write two bytes to consecutive 6845 registers
CA39 VDU 24 define graphics window
CA88 Set text window width according to character size
CAA2 VDU 29 define graphics origin
CAAC VDU 127 backspace and delete
CAD4 Add number of bytes in row to display address
CAE0 Zero PRINT line counter and scroll if enabled
CAE3 scroll if enabled

PAGE 203 (&CB) : OS ROM

CB14 Zero page PRINT line counter
CB1D Initialise video display parameters and workspace
CB33 Set up video display parameters table
CBC1 Initialise screen display parameters
CBF3 OSWORD 0A read character definition

PAGE 204 (&CC) : OS ROM

CC02 Character font definition indirection vector lookup table
CCF5 Process unrecognised VDU command
CCF8 Scroll back one row, check if wrap-round needed

PAGE 205 (&CD) : OS ROM

CD07 OSBYTE 14 explode soft character RAM allocation
CD3F Move text cursor to next line
CD6A Process character for display
CD77 Recover A reg, processor status from stack
CD7A Process cursor character for display
CDA4 Soft scroll one line
CDCE Set scan line address, scroll back until counter zero
CDDA Interchange current text cursor with value from co-ordinate workspace
CDDE Interchange two Page 3 bytes indexed by X,Y
CDE2 Interchange old and current graphics cursors
CDE4 Interchange old graphics cursor with value from co-ordinate workspace
CDE6 Interchange four-byte block indexed by X,Y in Page 3
CDFF Scroll text one line

PAGE 206 (&CE) : OS ROM

CE2A Set scan ine address=source line address
CE38 Copy source line to scan line
CE5B Determine text window height, if non-zero do CR
CE6E Set text cursor X-co-ordinate to left-hand side of text window
CE73 Add character to scan line
CEAC Clear text line to background colour
CEE8Confirm cursor in text window, calculate character row offset

PAGE 207 (&CF) : OS ROM

CF06 Calculate address of text cursor
CF63 PRINT character at graphics cursor
CFA6 Home graphics cursor
CFAD Set graphics cursor X-co-ordinate to left-hand column
CFB7 Set up character definition and display character
CFBF Display character
CFDC Insert teletext character in scan line, convert if required

PAGE 208 (&D0) : OS ROM

D03E Set up character definition pointers
D060 Process PLOT command
D0B3 Set Page 0 colour processing bytes
D0D9 Move graphics cursor to absolute position
D0DC Copy current graphics cursor co-ordinates from VDU queue
D0DE Copy four bytes from VDU queue
D0E3 Set colour of point at current graphics cursor
D0EB Omit last point in line
D0F0 Set colour of current graphics point, save to graphics scan line
D0F3Process colour and save to graphics scan line

PAGE 209 (&D1) : OS ROM

D104 Process colour of current graphics point
D10D Check current graphics cursor position with respect to window boundaries
D10F Check position of indexed graphics co-ordinates with respect to window
     boundaries
D128 Check current graphics point position with respect to window boundaries
D149 Adjust co-ordinates according to display MODE
D14D Adjust PLOT co-ordinater according to display options
D176 Adjust co-ordinate for relative/absolute PLOT, divide it by 2
D1AD Divide PLOT co-ordinate by 2
D1B8 Calculate graphics cursor offset according to display MODE
D1D5 Adjust cursor co-ordinates, calculate cursor offset
D1E3 Use graphics origin to calculate cursor offset
D1ED Execute PLOT command

PAGE 210 (&D2) : OS ROM

D214 Set up branch loops, PLOT parameters
D2E3 Set scan byte if appropriate, adjust co-ordinates and scan position

PAGE 211 (&D3) : OS ROM

D3D3 Decrement graphics cell top line address by one row set Y=7
D3ED Set graphics mask=left-hand colour mask, increment graphics cell by one
     line
D3FD Set graphics mask=right-hand colour mask, decrement graphics cell by one
     line

PAGE 212 (&D4) : OS ROM

D40D Calculate graphics cursor relative to graphics window
D411 Calculate graphics co-ordinates relative to specified point
D418 Calculate graphics co-ordinates offset
D42C If necessary, set up working co-ordinates, evaluate difference
D42C Make positive, divide Y by 2
D459 Take modules of working co-ordinate, divide Y co-ordinate by 2
D467 Change sign of working co-ordinate, if negative
D47C Copy 8 Page 3 bytes to new location (indexed by X,Y)
D480 Copy two Page 3 bytes to co-ordinate workspace
D482 Copy two Page 3 bytes to new location (indexed by X,Y)
D486 Copy current graphics cursor to co-ordinate workspace
D488 Copy current graphics cursor to new Page 3 location (indexed by Y)
D48A Copy four Page 3 bytes to new location (indexed by X,Y)
D49B Form 2s complement of number in Y & A registers
D4AA If byte legal, process colour, else discard it and move cursor
D4BF Omit last point in inverting action

PAGE 213 (&D5) : OS ROM

D506 PLOT with dotted line
D545 Move graphics cursor and calculate offset for MODE
D54B Get current graphics byte mask, set colour, save byte to scan line
D574 Reset graphics byte and save to scan line
D592 Check X co-ordinate from VDU queue against graphics window boundary
D5AC Process working X co-ordinate, transfer to VDU queue
D5CC OSWORD 0D read last two graphics cursor positions
D5D5 Transfer four bytes indexed by A reg to OS buffer
D5EA PLOT and FILL triangle

PAGE 214 (&D6) : OS ROM

D632 If old graphics cursor greater than new PLOT point interchange them
D636 If source co-ordinates greater than destination co-ordinates,
     interchange points
D647 OSBYTE 86 read text cursor position (POS and VPOS)
D658 Process co-ordinates and PLOT points till target reached
D6A2 Set and arrange working co-ordinates
D6A6 Arrange working co-ordinates, process colour mask and save to scan line

PAGE 215 (&D7) : OS ROM

D70E Recover target co-ordinates from stack
D774 Derive co-ordinates for next point in triangle PLOT
D7AC Add stored value to working co-ordinates, increment counter if necessary
D7C2 OSBYTE 87 read character at text cursor position

PAGE 216 (&D8) : OS ROM

D808 Derive character definition from displayed character
D839 Determine logical colour of specified point
D85D Get co-ordinates from VDU queue, set up graphics line address, colour mask
D85F Set co-ordinate source index, set up line address, colour mask
D864 Set up graphics line address
D8CE If enabled, PRINT at cursor position

PAGE 217 (&D9) : OS ROM

D905 If text cursor enabled, read character

D918 Reset CRTC cursor reg, cursors together, enable screen, set A reg to &0D
D923 OSBYTE 84 read HIMEM
D926 OSBYTE 85 read address of screen buffer for MODE
D940-D976 Page 2 vectors default settings
D976-D9CC MOS variables default setting
D9CD Soft-break handling routine
D9DA Power on break handling routine

PAGE 218 (&DA) : OS ROM

PAGE 219 (&DB) : OS ROM

PAGE 220 (&DC) : OS ROM

DC93 IRQ-handling routine indirected via &204

PAGE 222 (&DE) : OS ROM

DE89 IRQ2 indirected here via &206 to handle unrecognised IRQs
DEC5 OSRDCH: entry-point to character-input routine

PAGE 223 (&DF) : OS ROM

DF89 OSCLI: entry-point to command-line interpreter '*..'

PAGE 224 (&E0) : OS ROM

E0A4 OSWRCH: entry-point to character-output routine

PAGE 223 (&E1) : OS ROM

PAGE 224 (&E2) : OS ROM

PAGE 227 (&E3) : OS ROM

E310 User reserved vector indirected here via &200 on power-up

PAGE 228 (&E4) : OS ROM

PAGE 229 (&E5) : OS ROM

PAGE 230 (&E6) : OS ROM

PAGE 231 (&E7) : OS ROM

E772 OSBYTE: entry-point to routine handling "*FX"
E7EB OSWORD: entry-point

PAGE 232 (&E8) : OS ROM

PAGE 233 (&E9) : OS ROM

PAGE 234 (&EA) : OS ROM

PAGE 235 (&EB) : OS ROM

PAGE 236 (&EC) : OS ROM

PAGE 237 (&ED) : OS ROM

PAGE 238 (&EE) : OS ROM

PAGE 239 (&EF) : OS ROM

PAGE 240 (&F0) : OS ROM

PAGE 241 (&F1) : OS ROM

F18E OSARGS: entry-point
F1B1 FSC: entry-point

PAGE 242 (&F2) : OS ROM

F27D OSFILE: entry-point

PAGE 243 (&F3) : OS ROM

F3CA OSFIND: entry-point

PAGE 244 (&F4) : OS ROM

F4C9 OSBGET: entry-point

PAGE 245 (&F5) : OS ROM

F529 OSBPUT: entry-point

PAGE 246 (&F6) : OS ROM

PAGE 247 (&F7) : OS ROM

PAGE 248 (&F8) : OS ROM 

PAGE 249 (&F9) : OS ROM

PAGE 250 (&FA) : OS ROM

PAGE 251 (&FB) : OS ROM

PAGE 252 (&FC) : 1 MHZ BUS (FRED)

Memory-mapped input/output accessed by 1MHz Bus. Devices are connected to 8
data lines, 8 address lines (A0-A7), one page-select line - either "FRED"
(page &FC) or "JIM" (page &FD) - a read/write line and, if required, IRQ, NMI,
RST and a 1MHz clock. The CPU clock is automatically run at 1MHZ instead of
2MHz when either of these pages is addressed.

Suggested memory map of 'FRED':

FC00-FC0F Test hardware
FC10-FC13 Teletext
FC14-FC1F Prestel
FC20-FC27 IEEE 488 Interface
FC28-FC2F Acorn expansion
FC30-FC3F Cambridge Ring interface
FC40-FC47 Winchester Disc interface
FC48-FC7F Acorn expansion
FC80-FC8F Test hardware
FC90-FCBF Acorn expansion
FCC0-FCFE User applications
FCFF Paging Register for 'JIM'

PAGE 253 (&FD) : 1 MHZ BUS (JIM)

FD00-FDFF 1 mhz paged memory ( 256 bytes )

PAGE 254 (&FE) : I/O MEMORY (SHIELA)

FE00 6845 cathode-ray tube controller address register Values between 0 and 17
     (&11) written to this register select which of the 6845's 18 registers are
     read or written to at...
FE01 6845 data-register
Values are written to or read from &FE01 after a register-select value has been
placed in &FE00:
00  Duration of each horizontal scan
01  Number of characters per line
02  Position of horizontal sync pulse
03  Width of horizontal sync pulse
04  Vertical sync frequency
05  Vertical sync frequency
06  Number of text lines on screen
07  Vertical sync position
08  Interlace mode
09  Number of vertical dots per character
0A  Cursor start line
0B  Cursor stop line
0C  Memory-address of first screen-character (LSB)
0D  MSB
0E  Memory-address of text-cursor (LSB)
0F  MSB
10  Light-pen position (LSB)
11  MSB

FE08 6850 asynchronous interface adaptor (ACIA) (serial interface -
     cassette/RS432) Write: control regRead: status reg
FE09 6850 ACIA
Write: transmit data reg Read: receive data reg
FE10 Serial ULA control register
 Bit 0-2   Transmit baud rate
 Bit 3-5   Receive baud rate
 Bit 6     Select RS423 or cassette
 Bit 7     Motor relay & LED
FE20 Video ULA control register (Write only)
 Bit 0     Selected flash colour
 Bit 1     Teletext output select
 Bit 2&3   Number of characters per line
 Bit 4     Clock rate select
 Bit 5&6   Width of cursor in bytes
 Bit 7     Master cursor width
FE21 Video ULA palette (Write only)
FE30 Paged ROM latch
FE40 System 6522 versatile interface adaptor (VIA)
Registers as user/printer
VIA - addresses offset from &FE40 as below
FE60 User/printer 6522 VIA
Port B input/output register (User)
FE61 Port A input/output register (1) (Printer)
FE62 Data direction register - port B (User)
FE63 Data direction register - port A (Printer)
FE64 Timer 1 latch/counter LSB
FE65 Timer 1 latch-counter MSB
FE66 Timer 1 latch LSB
FE67 Timer 1 latch MSB
FE68 Timer 2 latch/counter LSB
FE69 Timer 2 latch/counter MSB
FE6A Shift register
FE6B Auxiliary control register
FE6C Peripheral control register
FE6D Interrupt flag register
FE6E Interrupt control register
FE6F Port A input/output register (2) (Printer)
FE80 8271 floppy-disk controller Write: Status registerRead: Command reg
FE81 8271 floppy-disk controller Write: Result registerRead: Parameter reg
FE82 8271 floppy-disk controller Write:Read: Reset reg
FE83 8271 floppy-disk controller Write: Not usedRead: Not used
FE84 8271 floppy-disk controller Write: Read dataRead: Write data
FEA0 68B54 Advanced data link controller Write: Control reg 1Read: Status reg 1
FEA1 68B54 Advanced data link controller Write: Control reg 2Read: Status reg 2
FEA2 68B54 Advanced data link controller Write: Transmit FIFORead: Receive FIFO
FEA3 68B54 Advanced data link controller Write: Transmit FIFORead: Receive FIFO
FEC0 uPD7002 analogue-to-digital converter (ADC) Write: Data latchRead:
      Status register
FEC1 uPD7002 analogue-to-digital converter hi-data byte
FEC2 uPD7002 analogue-to-digital converter low-data byte
FEE0-FEFF Tube ULA

PAGE 255 (&FF) : OS VECTORS

Operating system ROM calls.

FFA6 OSGBPB: entry-point
 EVNT: entry-point to event-handling routine usually revectored by user
 UPT: entry-point to user printer routine usually revectored by user
FFB9 OSRDRM entry point
FFBF OSEVEN entry point
FFBC Main VDU character output enter point
FFC2 GSINIT entry point
FFC5 GSREAD entry point
FFC8 Non-vectored OSWRCH
FFCB Non-vectored OSRDCH
FFCE OSFIND entry point
FFD1 OSGBPB entry point
FFD4 OSBPUT entry point
FFD7 OSBGET entry point
FFDA OSARGS entry point
FFDD OSFILE entry point
FFE0 OSRDCH entry point
FFE3 OSASCI entry point (highest-level entry to OSWRCH)
FFE7 OSNEWL entry point (mid-level entry to OSWRCH)
FFEE OSWRCH entry point (lowest level)
FFF1 OSWORD entry point
FFF4 OSBYTE entry point
FFF7 OSCLI  entry point
FFFA-FFFB NMI vector
FFFC-FFFD BREAK vector
FFFE-FFFF IRQ vector

NOTE

This map, which is by no means complete, has been compiled from examination of
the machine and with information from a variety of sources, including:

(1)BBC Micro User Guide John Coll, BBC
(2)Mapping Out the Beebon David Christensen, Personal Computer World
(3)The BBC Micro Revealed Jeremy Ruston, Interface
(4)The BBC Micro - an expert guide Mike James, Granada Publishing
(5)Advanced User Guide Bray,Dickens & Holmes, Cambridge Microcomputer Centre
(6)The BBC Micro Compendium Jeremy Ruston, Interface
(7)Basic Rom User Guide Mark Plumbley, Adder
(8)Inside OS Roger Cullis, Practical Computing
(9)The Advanced Basic Rom User Guide Colin Pharo, Cambridge Microcomputing

Very little of the information has been checked, and although errors
have been found in some of the sources, and corrected, many will have
been missed and new ones may have been introduced!

-------------------------------------------------------------------------

